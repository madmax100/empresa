#!/usr/bin/env python3
"""
Teste para verificar se o endpoint est√° calculando
corretamente o faturamento proporcional ao per√≠odo
"""

import os
import sys
import django
import requests
from datetime import datetime, date

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'empresa.settings')
django.setup()

def teste_faturamento_proporcional():
    """
    Testa diferentes per√≠odos para verificar o c√°lculo proporcional
    """
    print("=" * 80)
    print("üìä TESTE DE FATURAMENTO PROPORCIONAL")
    print("=" * 80)
    
    # Casos de teste com diferentes per√≠odos
    casos_teste = [
        {
            'nome': 'Per√≠odo de 15 dias (metade do m√™s)',
            'data_inicial': '2025-08-01',
            'data_final': '2025-08-15'
        },
        {
            'nome': 'Per√≠odo de 10 dias (1/3 do m√™s)', 
            'data_inicial': '2025-08-01',
            'data_final': '2025-08-10'
        },
        {
            'nome': 'Per√≠odo de 30 dias (m√™s completo)',
            'data_inicial': '2025-08-01', 
            'data_final': '2025-08-30'
        },
        {
            'nome': 'Per√≠odo de 7 dias (semana)',
            'data_inicial': '2025-08-01',
            'data_final': '2025-08-07'
        }
    ]
    
    url = "http://localhost:8000/api/contratos_locacao/suprimentos/"
    
    for i, caso in enumerate(casos_teste, 1):
        print(f"\n{i}. {caso['nome']}")
        print("=" * 60)
        
        params = {
            'data_inicial': caso['data_inicial'],
            'data_final': caso['data_final']
        }
        
        # Calcular dias manualmente para compara√ß√£o
        data_inicio = datetime.strptime(caso['data_inicial'], '%Y-%m-%d').date()
        data_fim = datetime.strptime(caso['data_final'], '%Y-%m-%d').date()
        dias_periodo = (data_fim - data_inicio).days + 1
        
        print(f"üìÖ Per√≠odo: {caso['data_inicial']} a {caso['data_final']}")
        print(f"üìä Dias no per√≠odo: {dias_periodo}")
        
        try:
            response = requests.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                # Verificar resumo financeiro
                resumo_financeiro = data.get('resumo_financeiro', {})
                faturamento_total = resumo_financeiro.get('faturamento_total_proporcional', 0)
                metodo_calculo = resumo_financeiro.get('metodo_calculo', 'N/A')
                
                print(f"üí∞ Faturamento total proporcional: R$ {faturamento_total:,.2f}")
                print(f"üîß M√©todo de c√°lculo: {metodo_calculo}")
                
                # Analisar alguns contratos espec√≠ficos
                resultados = data.get('resultados', [])
                print(f"\nüîç An√°lise de contratos (primeiros 3):")
                
                for j, resultado in enumerate(resultados[:3], 1):
                    contrato_id = resultado.get('contrato_id')
                    valores = resultado.get('valores_contratuais', {})
                    vigencia = resultado.get('vigencia', {})
                    analise = resultado.get('analise_financeira', {})
                    
                    valor_mensal = valores.get('valor_mensal', 0)
                    faturamento_prop = valores.get('faturamento_proporcional', 0)
                    calculo = valores.get('calculo', 'N/A')
                    
                    periodo_efetivo = vigencia.get('periodo_efetivo', {})
                    dias_vigentes = periodo_efetivo.get('dias_vigentes', 0)
                    
                    # Verificar c√°lculo manual
                    faturamento_esperado = (valor_mensal * dias_vigentes) / 30
                    diferenca = abs(faturamento_prop - faturamento_esperado)
                    
                    print(f"\n   Contrato {contrato_id}:")
                    print(f"      üí∞ Valor mensal: R$ {valor_mensal:.2f}")
                    print(f"      üìÖ Dias vigentes: {dias_vigentes}")
                    print(f"      üíµ Faturamento proporcional: R$ {faturamento_prop:.2f}")
                    print(f"      üßÆ C√°lculo: {calculo}")
                    print(f"      ‚úì Verifica√ß√£o: R$ {faturamento_esperado:.2f} (dif: R$ {diferenca:.2f})")
                    
                    if diferenca < 0.01:
                        print(f"      ‚úÖ C√°lculo correto!")
                    else:
                        print(f"      ‚ùå Diferen√ßa detectada!")
                
                # Verificar proporcionalidade
                if i == 1:  # Guardar refer√™ncia do primeiro caso para comparar
                    faturamento_referencia = faturamento_total
                    dias_referencia = dias_periodo
                else:
                    # Calcular propor√ß√£o esperada
                    proporcao_esperada = dias_periodo / dias_referencia
                    faturamento_esperado = faturamento_referencia * proporcao_esperada
                    
                    print(f"\nüìà Verifica√ß√£o de proporcionalidade:")
                    print(f"   Propor√ß√£o de dias: {dias_periodo}/{dias_referencia} = {proporcao_esperada:.2f}")
                    print(f"   Faturamento esperado: R$ {faturamento_esperado:,.2f}")
                    print(f"   Faturamento real: R$ {faturamento_total:,.2f}")
                    
                    diferenca_prop = abs(faturamento_total - faturamento_esperado)
                    if diferenca_prop < 1.0:  # Toler√¢ncia de R$ 1,00
                        print(f"   ‚úÖ Proporcionalidade correta!")
                    else:
                        print(f"   ‚ö†Ô∏è Diferen√ßa: R$ {diferenca_prop:.2f}")
                
            else:
                print(f"‚ùå Erro na requisi√ß√£o: Status {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå Erro: Servidor n√£o est√° rodando")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    print(f"\n" + "=" * 80)
    print("‚úÖ TESTE DE FATURAMENTO PROPORCIONAL CONCLU√çDO")
    print("=" * 80)

if __name__ == "__main__":
    teste_faturamento_proporcional()
